{"version":3,"file":"static/js/841.9df38277.chunk.js","mappings":"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","sources":["pages/Swallow/TaskListManager.tsx"],"sourcesContent":["import React, { ReactText, useEffect, useState } from 'react';\nimport { Button, Col, Input, DatePicker, TablePaginationConfig, Row, message, Space, Menu, Dropdown, Modal, Spin, Form, Tag, Popover, Tooltip, Select } from 'antd';\nimport { Content } from 'antd/lib/layout/layout';\nimport { getTaskManagerList, getTaskDependencyList, actionRecord, actionFreeze, actionUnFreeze, actionMultiTaskDelete, actionChangeDuty } from '../../api/swallowApi';\nimport { ITaskDependencyItem, ITaskManagerItem } from '../../api/interface/swallowInterface';\nimport TitleHeader from '../../components/TitleHeader/TitleHeader';\nimport TableBox from '../../components/TableBox/TableBox';\nimport moment from \"moment\";\nimport { CopyOutlined, DownOutlined, ExclamationCircleOutlined } from '@ant-design/icons'\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { createSearchParams, useNavigate } from 'react-router-dom';\nimport { getParam, getTableScroll } from '../../util';\nimport ModalForm from '../../components/ModalForm/ModalForm';\nimport cookies from 'js-cookie';\nimport { TTaskCircle, TTaskState, TTaskType } from '../../api/interface/stateInterface';\n\nconst { RangePicker } = DatePicker;\n\nexport default function TaskListManager() {\n    const userName = cookies.get('myapp_username') || ''\n    const PAGE_SIZE = 10;\n    const navigate = useNavigate();\n    const [dataList, setDataList] = useState<ITaskManagerItem[]>([]);\n    const [dataListDenpendency, setDataListDenpendency] = useState<ITaskDependencyItem[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [loadingDependency, setLoadingDependency] = useState(false)\n    // const [visible, setVisible] = useState(false);\n    const [inCharge, setInCharge] = useState<string | undefined>(getParam('inCharge') || userName)\n    const [usTaskId, setUsTaskId] = useState<string | undefined>(getParam('taskId'))//20210818172150283\n    const [viewId, setViewId] = useState<string | undefined>(getParam('viewId'))\n    const [usTaskName, setUsTaskName] = useState<string>('')\n    const [isRelVisable, setisRelVisable] = useState(false)\n    const [loadingRecord, setLoadingRecord] = useState(false)\n    const [visableRecord, setVisableRecord] = useState(false)\n    const [visableDuty, setVisableDuty] = useState(false)\n    const [loadingDuty, setLoadingDuty] = useState(false)\n    const [currentId, setCurrentId] = useState<string>()\n    const [currentinChanges, setCurrentinChanges] = useState<string>()\n    const [currentRecord, setCurrentRecord] = useState<ITaskManagerItem>()\n    const [selectedRowKeys, setSelectedRowKeys] = useState<ReactText[]>([])\n    const [notes, setNotes] = useState<string>()\n    const [dateInfo, setDateInfo] = useState<{\n        startTime: string,\n        endTime: string\n    }>({\n        startTime: moment().subtract(1, 'd').startOf('day').format('YYYY-MM-DD HH:mm:ss'),\n        endTime: moment().subtract(1, 'd').endOf('day').format('YYYY-MM-DD HH:mm:ss')\n    })\n    const pageInfoInit: TablePaginationConfig = {\n        current: 1,\n        pageSize: PAGE_SIZE,\n        total: 0,\n        showSizeChanger: true,\n        showQuickJumper: true,\n        showTotal: (total) => `共${total}条`,\n    };\n    const [pageInfo, setPageInfo] = useState<TablePaginationConfig>(pageInfoInit);\n    const [scrollY, setScrollY] = useState(\"\")\n    useEffect(() => {\n        setScrollY(getTableScroll())\n    }, [])\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const fetchData = (pageConf = pageInfoInit) => {\n        setLoading(true);\n        getTaskManagerList({\n            inCharge: inCharge || undefined,\n            taskName: usTaskName || undefined,\n            taskId: usTaskId || undefined,\n            notes: notes || undefined,\n            viewId: viewId || undefined,\n            pageIndex: pageConf.current || 1,\n            pageSize: pageConf.pageSize || 10\n        })\n            .then((res) => {\n                const { list, totalSize } = res.data.data.data\n                setDataList(list);\n                setPageInfo({ ...pageInfoInit, ...pageConf, total: totalSize });\n                setSelectedRowKeys([])\n            })\n            .finally(() => setLoading(false));\n    };\n\n    const fetchDependencyList = (taskId: number | string) => {\n        setLoadingDependency(true)\n        setDataListDenpendency([])\n        getTaskDependencyList({ taskId }).then(res => {\n            const { parent, son } = res.data.data\n            setDataListDenpendency([...parent, ...son])\n        }).finally(() => {\n            setLoadingDependency(false)\n        })\n    }\n\n    const handleMultiRecord = () => {\n        if (selectedRowKeys.length) {\n            Modal.confirm({\n                title: '批量删除',\n                icon: <ExclamationCircleOutlined />,\n                content: '确定批量删除任务?',\n                okText: '确认批量删除',\n                cancelText: '取消',\n                okButtonProps: { danger: true },\n                onOk() {\n                    return new Promise((resolve, reject) => {\n                        actionMultiTaskDelete({\n                            id: selectedRowKeys.join(','),\n                        })\n                            .then((res) => {\n                                resolve('');\n                            })\n                            .catch((err) => {\n                                reject();\n                            });\n                    })\n                        .then((res) => {\n                            message.success('批量删除成功');\n                            fetchData()\n                        })\n                        .catch(() => {\n                            message.error('批量删除失败');\n                        });\n                },\n                onCancel() { },\n            });\n        } else {\n            message.warn('请先选择')\n        }\n    }\n    const range = (start: number, end: number) => {\n        const result = [];\n        for (let i = start; i < end; i++) {\n            result.push(i);\n        }\n        return result;\n    }\n\n    return (\n        <div className=\"fade-in\">\n            <ModalForm\n                title=\"修改负责人\"\n                loading={loadingDuty}\n                visible={visableDuty}\n                formData={{\n                    inCharges: currentinChanges\n                }}\n                onCancel={() => { setVisableDuty(false) }}\n                onCreate={(values) => {\n                    setLoadingRecord(true)\n                    const { inCharges } = values\n\n                    actionChangeDuty({\n                        usTaskId: currentId || '',\n                        modifier: cookies.get('myapp_username') || '',\n                        inCharges: inCharges\n                    })\n                        .then((res) => {\n                            message.success('修改负责人成功')\n                            fetchData()\n                        })\n                        .catch((err) => {\n                            message.error('修改负责人失败，请使用\";\"号分隔')\n                        })\n                        .finally(() => { setVisableDuty(false) });\n                }}\n            >\n                <Form.Item\n                    label=\"负责人\"\n                    name=\"inCharges\"\n                    help=\"请使用';'号分隔\"\n                    rules={[{ required: true, message: '请选输入负责人' }]}\n                >\n                    <Input />\n                </Form.Item>\n            </ModalForm>\n\n            <ModalForm\n                title=\"补录\"\n                loading={loadingRecord}\n                visible={visableRecord}\n                onCancel={() => { setVisableRecord(false) }}\n                onCreate={(values) => {\n                    setLoadingRecord(true)\n                    const { fromDate, toDate } = values\n                    actionRecord({\n                        taskId: currentId || '',\n                        fromDate: fromDate.format('YYYY-MM-DD HH:mm:ss'),\n                        toDate: toDate.format('YYYY-MM-DD HH:mm:ss'),\n                        userName,\n                    }).then((res: any) => {\n                        if (res.data.success) {\n                            message.success('补录成功')\n                            fetchData()\n                            setVisableRecord(false)\n                        } else {\n                            message.error(res.data.errorMessage)\n                        }\n                    }).catch(err => {\n                        message.error('补录失败')\n                    }).finally(() => {\n                        setLoadingRecord(false)\n                    })\n                }}\n            >\n                <Form.Item\n                    label=\"开始时间\"\n                    name=\"fromDate\"\n                    rules={[{ required: true, message: '请选择开始时间' }]}\n                >\n                    <DatePicker showTime={{ defaultValue: moment('00:00:00', 'HH:mm:ss') }}\n                        disabledTime={() => {\n                            let disabledHours\n                            if (currentRecord?.cycleUnit === 'D') {\n                                disabledHours = () => range(0, 24)\n                            }\n                            return {\n                                disabledHours,\n                                disabledMinutes: () => range(0, 60),\n                                disabledSeconds: () => range(0, 60),\n                            }\n                        }}\n                        disabledDate={(current) => {\n                            return current && current > moment().endOf('day');\n                        }}\n                    />\n                </Form.Item>\n                <Form.Item\n                    label=\"结束时间\"\n                    name=\"toDate\"\n                    rules={[{ required: true, message: '请选择结束时间' }]}\n                >\n                    <DatePicker showTime={{ defaultValue: moment('00:00:00', 'HH:mm:ss') }}\n                        disabledTime={() => {\n                            let disabledHours\n                            if (currentRecord?.cycleUnit === 'D') {\n                                disabledHours = () => range(0, 24)\n                            }\n                            return {\n                                disabledHours,\n                                disabledMinutes: () => range(0, 60),\n                                disabledSeconds: () => range(0, 60),\n                            }\n                        }}\n                        disabledDate={(current) => {\n                            return current && current > moment().endOf('day');\n                        }}\n                    />\n                </Form.Item>\n            </ModalForm>\n            <Modal\n                title=\"父子关联列表\"\n                visible={isRelVisable}\n                footer={null}\n                width={1700}\n                onCancel={() => { setisRelVisable(false) }}>\n                <TableBox\n                    titleNode={null}\n                    rowKey={(record: ITaskDependencyItem) => {\n                        return record.taskId\n                    }}\n                    columns={[\n                        {\n                            title: '任务名称',\n                            dataIndex: 'taskName',\n                            key: 'taskName',\n                            width: 400,\n                            // fixed: 'left',\n                            render: (text: any, record: ITaskDependencyItem) => {\n                                return <div>\n                                    <div className=\"pb8 link\" onClick={() => {\n                                        navigate({\n                                            pathname: \"/data_model/data_pipeline/instance_manager\",\n                                            search: `?${createSearchParams({\n                                                taskId: record.taskId\n                                            })}`\n                                        });\n                                    }}>{record.taskName}</div>\n                                </div>\n                            }\n                        },\n                        {\n                            title: '任务名称',\n                            dataIndex: 'taskId',\n                            key: 'taskId',\n                            width: 250,\n                            render: (text: any, record: ITaskDependencyItem) => {\n                                return <div>\n                                    <span className=\"pr4\">{record.taskId}</span>\n                                    <CopyToClipboard text={record.taskId} onCopy={() => {\n                                        message.success('已成功复制到粘贴板')\n                                    }}>\n                                        <CopyOutlined />\n                                    </CopyToClipboard>\n                                </div>\n                            }\n                        },\n                        // {\n                        //     title: '数据起始时间',\n                        //     dataIndex: 'startDate',\n                        //     key: 'startDate',\n                        //     width: 250,\n                        //     sorter: (a: ITaskDependencyItem, b: ITaskDependencyItem) => new Date(a.startDate).valueOf() - new Date(b.startDate).valueOf(),\n                        // },\n                        // {\n                        //     title: '周期',\n                        //     dataIndex: 'cycleNumber',\n                        //     key: 'cycleNumber',\n                        //     width: 250,\n                        //     render: (text: any, record: ITaskDependencyItem) => {\n                        //         return <div>\n                        //             <div>{record.cycleNumber} {record.cycleUnit}</div>\n                        //         </div>\n                        //     }\n                        // },\n                        {\n                            title: '任务类型',\n                            dataIndex: 'taskType',\n                            key: 'taskType',\n                            width: 150,\n                            render: (text: any, record: ITaskDependencyItem) => {\n                                return <Tag color=\"blue\">{TTaskType[record.taskType]}</Tag>\n                            }\n                        },\n                        {\n                            title: '负责人',\n                            dataIndex: 'inCharge',\n                            key: 'inCharge',\n                            width: 300\n                        },\n                        {\n                            title: '数据负责人',\n                            dataIndex: 'dataCharger',\n                            key: 'dataCharger',\n                            width: 300\n                        },\n                        {\n                            title: '状态',\n                            dataIndex: 'status',\n                            key: 'status',\n                            width: 150,\n                            render: (text: any, record: ITaskDependencyItem) => {\n                                return <Tag color='default'>{TTaskState[record.status]}</Tag>\n                            }\n                        },\n                    ]}\n                    loading={loadingDependency}\n                    // pagination={pageInfo}\n                    dataSource={dataListDenpendency}\n                    // onChange={(pageInfo: any) => {\n                    //     setPageInfo(pageInfo)\n                    // }}\n                    scroll={{ x: 1200, y: undefined }}\n                />\n            </Modal>\n            <TitleHeader title=\"任务运行管理\" />\n            <Content className=\"appmgmt-content\">\n                <div className=\"d-f plr24 fw\">\n                    {/* <div className=\"mr16 d-f ac\">\n                        <span className=\"s0\" style={{ width: 80 }}>任务类型：</span>\n                        <Select style={{ width: 256 }} placeholder=\"任务类型\" />\n                    </div> */}\n                    <div className=\"mr8 d-f ac pt24\">\n                        <span className=\"ta-l s0\" style={{ width: 80 }}>业务分组：</span>\n                        <Select placeholder=\"业务分组\" style={{ width: 200 }} options={[\n                            { label: '全部', value: '' },\n                            { label: '全民k歌', value: 'swallow_ch_tag_qmkg' },\n                            { label: 'qq音乐', value: 'swallow_ch_tag_qqmusic' },\n                            { label: '懒人听书', value: 'swallow_ch_tag_lrts' },\n                            { label: '酷狗音乐', value: 'swallow_ch_tag_kugou' },\n                        ]} onChange={(value) => setNotes(value)} />\n                    </div>\n                    <div className=\"mr8 d-f ac pt24\">\n                        <span className=\"ta-r s0\" style={{ width: 80 }}>任务名：</span>\n                        <Input onPressEnter={() => {\n                            if (usTaskId || inCharge || usTaskName) {\n                                fetchData()\n                            } else {\n                                message.warn('任务名/Id或者负责人不能都为空')\n                            }\n                        }} placeholder=\"任务名\" style={{ width: 200 }} value={usTaskName} onChange={(e) => setUsTaskName(e.target.value)} />\n                    </div>\n                    <div className=\"mr8 d-f ac pt24\">\n                        <span className=\"ta-r s0\" style={{ width: 80 }}>任务ID：</span>\n                        <Input onPressEnter={() => {\n                            if (usTaskId || inCharge || usTaskName) {\n                                fetchData()\n                            } else {\n                                message.warn('任务名/Id或者负责人不能都为空')\n                            }\n                        }} placeholder=\"任务Id\" style={{ width: 200 }} value={usTaskId} onChange={(e) => setUsTaskId(e.target.value)} />\n                    </div>\n                    <div className=\"mr8 d-f ac pt24\">\n                        <span className=\"ta-r s0\" style={{ width: 80 }}>视图ID：</span>\n                        <Input onPressEnter={() => {\n                            if (usTaskId || inCharge || usTaskName) {\n                                fetchData()\n                            } else {\n                                message.warn('任务名/Id或者负责人不能都为空')\n                            }\n                        }} placeholder=\"视图ID\" style={{ width: 200 }} value={viewId} onChange={(e) => setViewId(e.target.value)} />\n                    </div>\n                    <div className=\"mr8 d-f ac pt24\">\n                        <span className=\"ta-r s0\" style={{ width: 80 }}>负责人：</span>\n                        <Input onPressEnter={() => {\n                            if (usTaskId || inCharge || usTaskName) {\n                                fetchData()\n                            } else {\n                                message.warn('任务名/Id或者负责人不能都为空')\n                            }\n                        }} placeholder=\"负责人/英文名\" style={{ width: 200 }} value={inCharge} onChange={(e) => setInCharge(e.target.value)} />\n                    </div>\n\n\n                    <Button className=\"mt24\" type=\"primary\" onClick={() => {\n                        if (usTaskId || inCharge || usTaskName) {\n                            fetchData()\n                        } else {\n                            message.warn('任务名/Id或者负责人不能都为空')\n                        }\n                    }}>搜索</Button>\n                </div>\n                <div className=\"p16\">\n                    <TableBox\n                        titleNode={<Col className=\"tablebox-title\">任务列表</Col>}\n                        buttonNode={<div><Button type=\"primary\" onClick={handleMultiRecord}>批量删除</Button></div>}\n                        rowKey={(record: ITaskManagerItem) => {\n                            return record.taskId\n                        }}\n                        // buttonNode={\n                        //     <Button type=\"primary\" onClick={() => setVisible(true)}>\n                        //         新建\n                        //     </Button>\n                        // }\n                        columns={[\n                            {\n                                title: '任务名称',\n                                dataIndex: 'taskName',\n                                key: 'taskName',\n                                width: 400,\n                                fixed: 'left',\n                                render: (text: any, record: ITaskManagerItem) => {\n                                    return <div>\n                                        <div className=\"link\" onClick={() => {\n                                            navigate({\n                                                pathname: \"/data_model/data_pipeline/instance_manager\",\n                                                search: `?${createSearchParams({\n                                                    taskId: record.taskId\n                                                })}`\n                                            });\n                                        }}>{record.taskName}</div>\n                                    </div>\n                                }\n                            },\n                            {\n                                title: '任务Id',\n                                dataIndex: 'taskId',\n                                key: 'taskId',\n                                width: 220,\n                                render: (text: any, record: ITaskManagerItem) => {\n                                    return <div>\n                                        <span className=\"pr8 link\" onClick={() => {\n                                            navigate({\n                                                pathname: \"/data_model/data_pipeline/instance_manager\",\n                                                search: `?${createSearchParams({\n                                                    taskId: record.taskId\n                                                })}`\n                                            });\n                                        }}>{record.taskId}</span>\n                                        <CopyToClipboard text={record.taskId} onCopy={() => {\n                                            message.success('已成功复制到粘贴板')\n                                        }}>\n                                            <CopyOutlined />\n                                        </CopyToClipboard>\n                                    </div>\n                                }\n                            },\n                            {\n                                title: '数据起始时间',\n                                dataIndex: 'startDate',\n                                key: 'startDate',\n                                width: 220,\n                                sorter: (a: ITaskManagerItem, b: ITaskManagerItem) => new Date(a.startDate).valueOf() - new Date(b.startDate).valueOf(),\n                            },\n                            {\n                                title: '周期',\n                                dataIndex: 'cycleNumber',\n                                key: 'cycleNumber',\n                                width: 100,\n                                render: (text: any, record: ITaskManagerItem) => {\n                                    return <div className=\"\">\n                                        {record.cycleUnit === 'R' ? '' : record.cycleNumber}{TTaskCircle[record.cycleUnit]}\n                                    </div>\n                                }\n                            },\n                            {\n                                title: '任务类型',\n                                dataIndex: 'taskType',\n                                key: 'taskType',\n                                width: 200,\n                                render: (text: any, record: ITaskDependencyItem) => {\n                                    return <Tag color=\"blue\">{TTaskType[record.taskType]}</Tag>\n                                }\n                            },\n                            {\n                                title: '负责人',\n                                dataIndex: 'inCharge',\n                                key: 'inCharge',\n                                width: 300,\n                                render: (text: any, record: ITaskDependencyItem) => {\n                                    return <Tooltip title={record.inCharge} placement=\"topLeft\">\n                                        <div className=\"ellip1\">\n                                            {record.inCharge}\n                                        </div>\n                                    </Tooltip>\n                                }\n                            },\n                            {\n                                title: '数据负责人',\n                                dataIndex: 'dataCharger',\n                                key: 'dataCharger',\n                                width: 150\n                            },\n                            {\n                                title: '状态',\n                                dataIndex: 'status',\n                                key: 'status',\n                                width: 150,\n                                render: (text: any, record: ITaskManagerItem) => {\n                                    return <Tag color='blue'>{TTaskState[record.status]}</Tag>\n                                }\n                            },\n                            {\n                                title: '操作',\n                                width: 220,\n                                dataIndex: 'handle',\n                                key: 'handle',\n                                align: 'right',\n                                fixed: 'right',\n                                render: (text: any, record: ITaskManagerItem) => {\n                                    return (\n                                        <Space size=\"middle\">\n                                            <span className=\"link\" onClick={() => {\n                                                navigate({\n                                                    pathname: \"/data_model/data_pipeline/instance_manager\",\n                                                    search: `?${createSearchParams({\n                                                        taskId: record.taskId\n                                                    })}`\n                                                });\n                                            }}>\n                                                实例\n                                        </span>\n                                            <span className=\"link\" onClick={() => {\n                                                setisRelVisable(true)\n                                                fetchDependencyList(record.taskId)\n                                            }}>\n                                                父子关联\n                                        </span>\n                                            {/* <span className=\"link\" onClick={() => { }}>\n                                            视图\n                                        </span> */}\n                                            <Dropdown overlay={\n                                                <Menu>\n                                                    {/* <Menu.Item>\n                                                <span className=\"link\" onClick={() => { }}>\n                                                    终止\n                                                </span>\n                                            </Menu.Item>\n                                            <Menu.Item>\n                                                <span className=\"link\" onClick={() => { }}>\n                                                    强制成功\n                                                </span>\n                                            </Menu.Item> */}\n                                                    <Menu.Item key={'duty'}\n                                                        onClick={() => {\n                                                            setCurrentinChanges(record.inCharge)\n                                                            setCurrentId(record.taskId)\n                                                            setVisableDuty(true)\n                                                        }}\n                                                    >\n                                                        <span className=\"link\">\n                                                            修改负责人\n                                                        </span>\n                                                    </Menu.Item>\n                                                    <Menu.Item key={'record'} disabled={(+record.cycleNumber === 1 && record.cycleUnit === 'O') || record.status === 'F'}\n                                                        onClick={() => {\n                                                            setVisableRecord(true)\n                                                            setCurrentId(record.taskId)\n                                                            setCurrentRecord(record)\n                                                        }}\n                                                    >\n                                                        <span className={(+record.cycleNumber === 1 && record.cycleUnit === 'O') || record.status === 'F' ? 'link-disable' : 'link'} >\n                                                            补录\n                                                </span>\n                                                    </Menu.Item>\n                                                    <Menu.Item key={'freeze'} disabled={record.status === 'F'}\n                                                        onClick={() => {\n                                                            Modal.confirm({\n                                                                title: '冻结',\n                                                                icon: <ExclamationCircleOutlined />,\n                                                                content: '确定冻结该任务?',\n                                                                okText: '确认冻结',\n                                                                cancelText: '取消',\n                                                                okButtonProps: { danger: true },\n                                                                onOk() {\n                                                                    return new Promise((resolve, reject) => {\n                                                                        actionFreeze({\n                                                                            taskIds: record.taskId,\n                                                                            user: cookies.get('myapp_username') || '',\n                                                                        })\n                                                                            .then((res) => {\n                                                                                resolve('');\n                                                                            })\n                                                                            .catch((err) => {\n                                                                                reject();\n                                                                            });\n                                                                    })\n                                                                        .then((res) => {\n                                                                            message.success('冻结成功');\n                                                                            fetchData()\n                                                                        })\n                                                                        .catch(() => {\n                                                                            message.error('冻结失败');\n                                                                        });\n                                                                },\n                                                                onCancel() { },\n                                                            });\n                                                        }}\n                                                    >\n                                                        <span className={record.status === 'F' ? 'link-disable' : 'link'}>\n                                                            冻结\n                                                </span>\n                                                    </Menu.Item>\n                                                    <Menu.Item key={'unfreeze'} disabled={record.status !== 'F'}\n                                                        onClick={() => {\n                                                            Modal.confirm({\n                                                                title: '解除冻结',\n                                                                icon: <ExclamationCircleOutlined />,\n                                                                content: '确定解除冻结该任务?',\n                                                                okText: '确认解除',\n                                                                cancelText: '取消',\n                                                                okButtonProps: { danger: true },\n                                                                onOk() {\n                                                                    return new Promise((resolve, reject) => {\n                                                                        actionUnFreeze({ taskIds: record.taskId })\n                                                                            .then((res) => {\n                                                                                resolve('');\n                                                                            })\n                                                                            .catch((err) => {\n                                                                                reject();\n                                                                            });\n                                                                    })\n                                                                        .then((res) => {\n                                                                            message.success('解冻成功');\n                                                                            fetchData()\n                                                                        })\n                                                                        .catch(() => {\n                                                                            message.error('解冻失败');\n                                                                        });\n                                                                },\n                                                                onCancel() { },\n                                                            });\n                                                        }}\n                                                    >\n                                                        <span className={record.status !== 'F' ? 'link-disable' : 'link'}>\n                                                            解除冻结\n                                                </span>\n                                                    </Menu.Item>\n                                                    <Menu.Item key=\"itemDelete\"\n                                                        onClick={() => {\n                                                            Modal.confirm({\n                                                                title: '删除',\n                                                                icon: <ExclamationCircleOutlined />,\n                                                                content: '确定删除该任务?',\n                                                                okText: '确认删除',\n                                                                cancelText: '取消',\n                                                                okButtonProps: { danger: true },\n                                                                onOk() {\n                                                                    return new Promise((resolve, reject) => {\n                                                                        actionMultiTaskDelete({\n                                                                            id: record.taskId,\n                                                                        })\n                                                                            .then((res) => {\n                                                                                resolve('');\n                                                                            })\n                                                                            .catch((err) => {\n                                                                                reject();\n                                                                            });\n                                                                    })\n                                                                        .then((res) => {\n                                                                            message.success('删除成功');\n                                                                            fetchData()\n                                                                        })\n                                                                        .catch(() => {\n                                                                            message.error('删除失败');\n                                                                        });\n                                                                },\n                                                                onCancel() { },\n                                                            });\n                                                        }}\n                                                    >\n                                                        <span className={record.status === 'F' ? 'link-disable' : 'link'}>\n                                                            删除\n                                                </span>\n                                                    </Menu.Item>\n                                                </Menu>}>\n                                                <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n                                                    更多 <DownOutlined />\n                                                </a>\n                                            </Dropdown>\n                                        </Space>\n                                    );\n                                },\n                            },\n                        ]}\n                        loading={loading}\n                        pagination={pageInfo}\n                        dataSource={dataList}\n                        onChange={(pageInfo: any) => {\n                            fetchData(pageInfo)\n                        }}\n                        rowSelection={{\n                            type: 'checkbox',\n                            columnWidth: 80,\n                            selectedRowKeys,\n                            onChange: (selectedRowKeys) => {\n                                setSelectedRowKeys(selectedRowKeys)\n                            }\n                        }}\n                        scroll={{ x: 1200, y: scrollY }}\n                    />\n                </div>\n            </Content>\n        </div >\n    );\n}\n\n"],"names":["DatePicker","TaskListManager","userName","cookies","navigate","useNavigate","useState","dataList","setDataList","dataListDenpendency","setDataListDenpendency","loading","setLoading","loadingDependency","setLoadingDependency","getParam","inCharge","setInCharge","usTaskId","setUsTaskId","viewId","setViewId","usTaskName","setUsTaskName","isRelVisable","setisRelVisable","loadingRecord","setLoadingRecord","visableRecord","setVisableRecord","visableDuty","setVisableDuty","loadingDuty","currentId","setCurrentId","currentinChanges","setCurrentinChanges","currentRecord","setCurrentRecord","selectedRowKeys","setSelectedRowKeys","notes","setNotes","startTime","moment","subtract","startOf","format","endTime","endOf","pageInfoInit","current","pageSize","total","showSizeChanger","showQuickJumper","showTotal","pageInfo","setPageInfo","scrollY","setScrollY","useEffect","getTableScroll","fetchData","pageConf","getTaskManagerList","undefined","taskName","taskId","pageIndex","then","res","data","list","totalSize","finally","range","start","end","result","i","push","className","title","visible","formData","inCharges","onCancel","onCreate","values","actionChangeDuty","modifier","message","catch","err","label","name","help","rules","required","fromDate","toDate","actionRecord","success","errorMessage","showTime","defaultValue","disabledTime","disabledHours","cycleUnit","disabledMinutes","disabledSeconds","disabledDate","footer","width","titleNode","rowKey","record","columns","dataIndex","key","render","text","onClick","pathname","search","createSearchParams","CopyToClipboard","onCopy","color","TTaskType","taskType","TTaskState","status","dataSource","scroll","x","y","style","placeholder","options","value","onChange","onPressEnter","e","target","type","buttonNode","length","Modal","icon","content","okText","cancelText","okButtonProps","danger","onOk","Promise","resolve","reject","actionMultiTaskDelete","id","join","fixed","sorter","a","b","Date","startDate","valueOf","cycleNumber","TTaskCircle","placement","align","size","getTaskDependencyList","parent","son","overlay","disabled","actionFreeze","taskIds","user","actionUnFreeze","preventDefault","pagination","rowSelection","columnWidth"],"sourceRoot":""}